import Foundation
import UIKit

// swiftlint:disable all
/// This file is generated by Weaver 1.1.6
/// DO NOT EDIT!

final class MainDependencyContainer {

    private let provider: Provider

    fileprivate init(provider: Provider = Provider()) {
        self.provider = provider
    }

    private var hostBuilder: Provider.Builder<Optional<String>> {
        return provider.getBuilder("host", Optional<String>.self)
    }

    private var loggerBuilder: Provider.Builder<Logger> {
        return provider.getBuilder("logger", Logger.self)
    }

    private var movieAPIBuilder: Provider.Builder<APIProtocol> {
        return provider.getBuilder("movieAPI", APIProtocol.self)
    }

    private var urlSessionBuilder: Provider.Builder<URLSession> {
        return provider.getBuilder("urlSession", URLSession.self)
    }

    var host: Optional<String> {
        return hostBuilder(nil)
    }

    var logger: Logger {
        return loggerBuilder(nil)
    }

    var movieAPI: APIProtocol {
        return movieAPIBuilder(nil)
    }

    var urlSession: URLSession {
        return urlSessionBuilder(nil)
    }

    private func movieAPIDependencyResolver() -> MovieAPIDependencyResolver {
        let _self = MainDependencyContainer()
        var _builders = Dictionary<String, Any>()
        _builders["logger"] = Provider.lazyBuilder( { (_: Optional<Provider.ParametersCopier>) -> Logger in return Logger() })
        _builders["urlSession"] = urlSessionBuilder
        _self.provider.addBuilders(_builders)
        _ = _self.logger
        return _self
    }

    fileprivate func publicMovieAPIDependencyResolver(urlSession: URLSession) -> MovieAPIDependencyResolver {
        let _self = MainDependencyContainer()
        var _builders = Dictionary<String, Any>()
        _builders["logger"] = Provider.lazyBuilder( { (_: Optional<Provider.ParametersCopier>) -> Logger in return Logger() })
        _builders["urlSession"] = Provider.valueBuilder(urlSession)
        _self.provider.addBuilders(_builders)
        _ = _self.logger
        return _self
    }

    fileprivate func imageManagerDependencyResolver() -> ImageManagerDependencyResolver {
        let _self = MainDependencyContainer(provider: provider.copy())
        let _inputProvider = _self.provider.copy()
        var _builders = Dictionary<String, Any>()
        _builders["logger"] = Provider.lazyBuilder( { (_: Optional<Provider.ParametersCopier>) -> Logger in return Logger() })
        _builders["urlSession"] = Provider.lazyBuilder(
             { (_: Optional<Provider.ParametersCopier>) -> URLSession in
                let _inputContainer = MainDependencyContainer(provider: _inputProvider)
                return ImageManager.makeURLSession(_inputContainer as URLSessionInputDependencyResolver)
            }
        )
        _builders["movieAPI"] = Provider.lazyBuilder(
             { (_: Optional<Provider.ParametersCopier>) -> APIProtocol in
                let _inputContainer = MainDependencyContainer(provider: _inputProvider)
                let __self = _inputContainer.movieAPIDependencyResolver()
                return MovieAPI(injecting: __self)
            }
        )
        _self.provider.addBuilders(_builders)
        _inputProvider.addBuilders(_builders)
        _ = _self.logger
        _ = _self.urlSession
        _ = _self.movieAPI
        return _self
    }

    static func imageManagerDependencyResolver() -> ImageManagerDependencyResolver {
        let _self = MainDependencyContainer().imageManagerDependencyResolver()
        return _self
    }

    private func movieManagerDependencyResolver() -> MovieManagerDependencyResolver {
        let _self = MainDependencyContainer(provider: provider.copy())
        let _inputProvider = _self.provider
        var _builders = Dictionary<String, Any>()
        _builders["urlSession"] = Provider.lazyBuilder(
             { (_: Optional<Provider.ParametersCopier>) -> URLSession in
                let _inputContainer = MainDependencyContainer(provider: _inputProvider.copy())
                return { _ in URLSession.shared }(_inputContainer as URLSessionInputDependencyResolver)
            }
        )
        _builders["movieAPI"] = Provider.lazyBuilder(
             { (_: Optional<Provider.ParametersCopier>) -> APIProtocol in
                let _inputContainer = MainDependencyContainer(provider: _inputProvider.copy())
                let __self = _inputContainer.movieAPIDependencyResolver()
                return MovieAPI(injecting: __self)
            }
        )
        _builders["logger"] = _self.loggerBuilder
        _self.provider.addBuilders(_builders)
        _ = _self.urlSession
        _ = _self.movieAPI
        return _self
    }

    fileprivate func publicMovieManagerDependencyResolver(host: Optional<String>,
                                                          logger: Logger) -> MovieManagerDependencyResolver {
        let _self = MainDependencyContainer(provider: provider.copy())
        let _inputProvider = _self.provider
        var _builders = Dictionary<String, Any>()
        _builders["urlSession"] = Provider.lazyBuilder(
             { (_: Optional<Provider.ParametersCopier>) -> URLSession in
                let _inputContainer = MainDependencyContainer(provider: _inputProvider.copy())
                return { _ in URLSession.shared }(_inputContainer as URLSessionInputDependencyResolver)
            }
        )
        _builders["movieAPI"] = Provider.lazyBuilder(
             { (_: Optional<Provider.ParametersCopier>) -> APIProtocol in
                let _inputContainer = MainDependencyContainer(provider: _inputProvider.copy())
                let __self = _inputContainer.movieAPIDependencyResolver()
                return MovieAPI(injecting: __self)
            }
        )
        _builders["host"] = Provider.valueBuilder(host)
        _builders["logger"] = Provider.valueBuilder(logger)
        _self.provider.addBuilders(_builders)
        _ = _self.urlSession
        _ = _self.movieAPI
        return _self
    }
}

protocol HostResolver: AnyObject {
    var host: Optional<String> { get }
}

protocol LoggerResolver: AnyObject {
    var logger: Logger { get }
}

protocol MovieAPIResolver: AnyObject {
    var movieAPI: APIProtocol { get }
}

protocol UrlSessionResolver: AnyObject {
    var urlSession: URLSession { get }
}

extension MainDependencyContainer: HostResolver, LoggerResolver, MovieAPIResolver, UrlSessionResolver {
}

extension MainDependencyContainer {
}

typealias MovieAPIDependencyResolver = UrlSessionResolver & LoggerResolver

typealias ImageManagerDependencyResolver = LoggerResolver & UrlSessionResolver & MovieAPIResolver

typealias MovieManagerDependencyResolver = LoggerResolver & UrlSessionResolver & MovieAPIResolver & HostResolver

typealias URLSessionInputDependencyResolver = LoggerResolver & MovieAPIResolver & UrlSessionResolver

extension MovieAPI {
    public convenience init(urlSession: URLSession) {
        let _self = MainDependencyContainer()
        let __self = _self.publicMovieAPIDependencyResolver(urlSession: urlSession)
        self.init(injecting: __self)
    }
}

extension ImageManager {
    public convenience init() {
        let _self = MainDependencyContainer()
        let __self = _self.imageManagerDependencyResolver()
        self.init(injecting: __self)
    }
}

extension MovieManager {
    public convenience init(host: Optional<String>,
                            logger: Logger) {
        let _self = MainDependencyContainer()
        let __self = _self.publicMovieManagerDependencyResolver(host: host, logger: logger)
        self.init(injecting: __self)
    }
}

// MARK: - Fatal Error

extension MainDependencyContainer {

    static var onFatalError: (String, StaticString, UInt) -> Never = { message, file, line in
        Swift.fatalError(message, file: file, line: line)
    }

    fileprivate static func fatalError(file: StaticString = #file, line: UInt = #line) -> Never {
        onFatalError("Invalid memory graph. This is never suppose to happen. Please file a ticket at https://github.com/scribd/Weaver", file, line)
    }
}

// MARK: - Provider

private final class Provider {

    typealias ParametersCopier = (Provider) -> Void
    typealias Builder<T> = (ParametersCopier?) -> T

    private(set) var builders: Dictionary<String, Any>

    init(builders: Dictionary<String, Any> = [:]) {
        self.builders = builders
    }
}

private extension Provider {

    func addBuilders(_ builders: Dictionary<String, Any>) {
        builders.forEach { key, value in
            self.builders[key] = value
        }
    }

    func setBuilder<T>(_ name: String, _ builder: @escaping Builder<T>) {
        builders[name] = builder
    }

    func getBuilder<T>(_ name: String, _ type: T.Type) -> Builder<T> {
        guard let builder = builders[name] as? Builder<T> else {
            return Provider.fatalBuilder()
        }
        return builder
    }

    func copy() -> Provider {
        return Provider(builders: builders)
    }
}

private extension Provider {

    static func valueBuilder<T>(_ value: T) -> Builder<T> {
        return { _ in
            return value
        }
    }

    static func weakOptionalValueBuilder<T>(_ value: Optional<T>) -> Builder<Optional<T>> where T: AnyObject {
        return { [weak value] _ in
            return value
        }
    }

    static func lazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> {
        var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    static func weakLazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> where T: AnyObject {
        weak var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    static func fatalBuilder<T>() -> Builder<T> {
        return { _ in
            MainDependencyContainer.fatalError()
        }
    }
}
